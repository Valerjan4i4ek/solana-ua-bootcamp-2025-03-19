use std::fs::File;
use std::io::Read;
use serde::Deserialize;
use solana_sdk::signature::{Keypair, Signer};

#[derive(Deserialize)]
struct SerializableKeypair {
    secret: Vec<u8>,
    public: String,
}

fn main() {
    println!("üîë –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á–∞ –∑ —Ñ–∞–π–ª—É...");

    let mut file = File::open("keypair.json").expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ keypair.json");
    let mut data = String::new();
    file.read_to_string(&mut data).expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É");

    let deserialized: SerializableKeypair =
        serde_json::from_str(&data).expect("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á–∞");

    let keypair = Keypair::from_bytes(&deserialized.secret)
        .expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∫–ª—é—á —ñ–∑ secret");

    println!("‚úÖ –ö–ª—é—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
    println!("–ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: {}", keypair.pubkey());
}
