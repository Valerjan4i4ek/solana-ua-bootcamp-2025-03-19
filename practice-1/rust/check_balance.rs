use std::fs::File;
use std::io::Read;
use std::str::FromStr;
use serde::Deserialize;
use solana_client::rpc_client::RpcClient;
use solana_sdk::{
    signature::{Keypair, Signer},
    pubkey::Pubkey,
    commitment_config::CommitmentConfig,
    system_instruction,
    transaction::Transaction,
};

const RPC_URL: &str = "https://api.devnet.solana.com";
const MIN_BALANCE_SOL: f64 = 0.5;
const AIRDROP_AMOUNT_SOL: f64 = 1.0;

#[derive(Deserialize)]
struct SerializableKeypair {
    secret: Vec<u8>,
    public: String,
}

fn main() {
    println!("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á–∞ –∑ keypair.json...");

    let mut file = File::open("keypair.json").expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª");
    let mut data = String::new();
    file.read_to_string(&mut data).expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª");

    let parsed: SerializableKeypair = serde_json::from_str(&data).expect("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");
    let keypair = Keypair::from_bytes(&parsed.secret).expect("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ Keypair");
    let pubkey = Pubkey::from_str(&parsed.public).expect("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞");

    println!("üîë –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: {}", pubkey);

    let client = RpcClient::new_with_commitment(RPC_URL.to_string(), CommitmentConfig::confirmed());

    let balance_lamports = client
        .get_balance(&pubkey)
        .expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å");

    let balance_sol = balance_lamports as f64 / 1_000_000_000.0;
    println!("üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {:.4} SOL", balance_sol);

    if balance_sol < MIN_BALANCE_SOL {
        println!("üì¶ –ë–∞–ª–∞–Ω—Å –º–µ–Ω—à–µ –Ω—ñ–∂ {:.2} SOL. –í–∏–∫–æ–Ω—É—î–º–æ airdrop –Ω–∞ {:.2} SOL...", MIN_BALANCE_SOL, AIRDROP_AMOUNT_SOL);

        let sig = client
            .request_airdrop(&pubkey, (AIRDROP_AMOUNT_SOL * 1_000_000_000.0) as u64)
            .expect("‚ùå Airdrop –Ω–µ –≤–¥–∞–≤—Å—è");

        println!("‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...");
        client
            .confirm_transaction(&sig)
            .expect("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ");

        println!("‚úÖ Airdrop –≤–∏–∫–æ–Ω–∞–Ω–æ. Tx: {}", sig);

        let updated_balance = client
            .get_balance(&pubkey)
            .expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è airdrop");

        println!("üí∞ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {:.4} SOL", updated_balance as f64 / 1_000_000_000.0);
    } else {
        println!("üëç –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π, airdrop –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.");
    }
}
