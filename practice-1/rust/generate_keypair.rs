use solana_sdk::signature::{Keypair, Signer};
use std::fs::File;
use std::io::Write;
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
struct SerializableKeypair {
    secret: Vec<u8>,
    public: String,
}

fn main() {
    println!("üîê –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞...");

    let keypair = Keypair::new();
    let pubkey = keypair.pubkey();
    let secret_bytes = keypair.to_bytes().to_vec();

    let serializable = SerializableKeypair {
        secret: secret_bytes,
        public: pubkey.to_string(),
    };

    let json = serde_json::to_string_pretty(&serializable)
        .expect("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á–∞ —É JSON");

    let mut file = File::create("keypair.json")
        .expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª keypair.json");
    file.write_all(json.as_bytes())
        .expect("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª");

    println!("‚úÖ –ö–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É keypair.json");
    println!("üßæ –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: {}", pubkey);
}

